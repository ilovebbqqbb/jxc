<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper   
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.github.jxc.dao.SellStatisticsDao">
	<resultMap type="com.github.jxc.pojo.SellStatistics" id="BaseResultMap">
		<id column="store_id" property="storeId" jdbcType="INTEGER" />
		<result column="sell_num_statistics" property="sellNumStatistics" jdbcType="INTEGER"/>
		<result column="sell_money_statistics" property="sellMoneyStatistics" jdbcType="FLOAT"/>
		<result column="return_num_statistics" property="returnNumStatistics" jdbcType="INTEGER"/>
		<result column="return_money_statistics" property="returnMoneyStatistics" jdbcType="FLOAT"/>
		<association property="store" javaType="com.github.jxc.pojo.Store">
			<id column="store_id" property="storeId" jdbcType="INTEGER"/>
			<result column="store_name" property="storeName" jdbcType="VARCHAR"/>
			<result column="linkman" property="linkman" jdbcType="VARCHAR"/>
			<result column="phone_number" property="phoneNumber" jdbcType="VARCHAR"/>
			<result column="store_address" property="storeAddress" jdbcType="VARCHAR"/>
			<result column="stock_min" property="stockMin" jdbcType="VARCHAR"/>
			<result column="stock_max" property="stockMax" jdbcType="VARCHAR"/>
			<result column="created_at" property="createdAt" jdbcType="TIMESTAMP"/>
			<result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP"/>
		</association>		
	</resultMap>
	
	<select id="selectByStoreId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
		select 
		s.store_id,s.store_name, sp.sell_num_statistics,sp.sell_money_statistics,ifnull(rp.return_num_statistics,0) as return_num_statistics,ifnull(rp.return_money_statistics,0) as return_money_statistics
		from store s
		left join (
			select store_id,sum(sell_num) as sell_num_statistics,sum(sell_money) as sell_money_statistics
			from sell_preview group by store_id
		) sp
		on s.store_id = sp.store_id
		left join (
			select store_id,sum(return_num) as return_num_statistics,sum(return_money) as return_money_statistics
			from return_preview group by store_id
		) rp
		on s.store_id = rp.store_id
		where s.store_id = #{storeId,jdbcType=INTEGER}
	</select>
	
	<select id="selectAll" resultMap="BaseResultMap">
		select 
		s.store_id,s.store_name, sp.sell_num_statistics,sp.sell_money_statistics,ifnull(rp.return_num_statistics,0) as return_num_statistics,ifnull(rp.return_money_statistics,0) as return_money_statistics
		from store s
		left join (
			select store_id,sum(sell_num) as sell_num_statistics,sum(sell_money) as sell_money_statistics
			from sell_preview group by store_id
		) sp
		on s.store_id = sp.store_id
		left join (
			select store_id,sum(return_num) as return_num_statistics,sum(return_money) as return_money_statistics
			from return_preview group by store_id
		) rp
		on s.store_id = rp.store_id
	</select>
	
	<select id="selectByTime" resultMap="BaseResultMap" parameterType="com.github.jxc.pojo.SellStatisticsTimeKey">
		select 
		s.store_id,s.store_name, sp.sell_num_statistics,sp.sell_money_statistics,ifnull(rp.return_num_statistics,0) as return_num_statistics,ifnull(rp.return_money_statistics,0) as return_money_statistics
		from store s
		left join (
			select store_id,sum(sell_num) as sell_num_statistics,sum(sell_money) as sell_money_statistics
			from sell_preview 
			where sell_time between #{startTime,jdbcType=TIMESTAMP} and #{endTime,jdbcType=TIMESTAMP}
			group by store_id
		) sp
		on s.store_id = sp.store_id
		left join (
			select store_id,sum(return_num) as return_num_statistics,sum(return_money) as return_money_statistics
			from return_preview 
			where return_time between #{startTime,jdbcType=TIMESTAMP} and #{endTime,jdbcType=TIMESTAMP}
			group by store_id
		) rp
		on s.store_id = rp.store_id
		where s.store_id = #{storeId,jdbcType=INTEGER}
	</select>
</mapper>